9/02/2022
-   Started going through Nand2Tetris again from chapter one again after 2 years. Stopped at Chapter 8 2 years ago to focus on
making something that will make money for the company while I focus on research
-   Studied chapter one from the main textbook, studied the hardware simulator tutorial PDF and then studied the lecture note
-   I found it quite challenging to understand the simplification of the truth table to boolean expression on Slide 19 of the 
lecture note. This made me to go and search online for all the possible boolean functions. I took note of all of them and attempted
to derive them. I realized that "Distributive Law" is a very powerful law and somehow finds itself in a lot of examples as 
seen in the Boolean expression I was finding hard to understand. Here is the link to the document that shows all the laws of 
boolean expression: https://www.mi.mun.ca/users/cchaulk/misc/boolean.htm
-   I did the HDL for NOT, AND and OR Gate
-   Designing the logic gate diagram of the MUX took me almost one hour to think about the design. The feeling was good finally 
creating the final design. Implementing the HDL was really easy and ran once. 
-   DMux was a little mind boggling but eventually nailed it 

10/02/2022
-   Studied 2 examples of the MUX from the Lecture Note:
    1. For creating a programmable logic gate: In the example, a gate that can act as both And and Or gate using select bit
    for switching operations between And and Or
    2. For creating communication networks. Here a single communication channel can be used to pass multiple messages

-   Completed the HDL for 16-bit variants of the logic gates : Not16, And16, Or16 and Mux16

23/02/2022

-   Chapeter 2 was very insightful as I had to spend a lot of time deriving the ALU outputs by working backwords. This chapter
    is strongly related to the chapter one. To have the best understanding, I had to derive all the Hack ALU outputs in the back of my
    physical note. It is really great understing 2's completement as this is the fundamental knowledge required for the Hack ALU.
    I have completed the HACK ALU Logic diagram. I did not implement Zr and Ng outputs easily. I had to take a look at how I did it 2 years ago. 
    Then I realized that it was because I did not remeber Or8Way. I had skipped the excerise in chapter one. It was annoying but I had to go back to chapter one
    to complete the implementations. 


27/02/2022

-   So I realized I missed MultiWay Variant projects in chapter one. I had to go back to complete all the implementations of Or8Way,Mux4Way16, Mux8Way16, 
    DMux4Way and DMux8Way. These implementations took longer than I expected to implement the logic diagram especially the DMux4Way. 

-   I will be going back to implement the Hack ALU in HDL. I have completed 


27/02/2022

-   Completed the implementation of the Hack ALU
-   Decided to study my past notes 2 years ago after going through the text and lecture notes

06/03/2022
-   Completed the Chapter 3 on the main text (Elements of Computing Systems - Building a modern computer from first principles) yesterday. 
-   Completed the lecture note on chapter 3
-   Key learnings:
    i)  Sequential Chips maintain state and this can now be used a building block to create advanced memory units like Registers and RAMs 
    ii) Program counter (PC): These are special registers that keep track of instructions a computer should execute. The PC is the basic register that 
        handles any software code at the lowest level. I found this to be very beautiful. It has 3 operations that all codes must adhere to
        -   Reset   (PC = 0)    -   Fetch the first instruction
        -   Next    (PC++)      -   Fetch the next instruction 
        -   Goto    (PC = n)    -   Fetch instruction n

        If you carefully look at these 3 operations you can easily realize that all software code ,no matter the complexity eventually breaks down to these function. 
        I think is is absolutely amazing to see how the hardware powers every single part of the software with so much simplicity and elegance

13/03/2022  

-   Completed the PC today after 4 very long trials and failures. 

10/05/2022

-   Running the mult.asm project: NOTE that to fully test the assembly file, first load the asm file into the assembler and generate the hack file
    then save the hack file in the same directory. Next use the load the asm file in the CPUEmulator and then load the test script. The test script
    requires the .hack file so if you don't generate it, the CPUEmulator will throw an exception. 

-   Completed mult.asm : This was a little challenging because my loop was not terminating properly, I found out by carefully
    debugging with the CPUEmulator. So I realized my jump statement (@END D;JEQ) in line 48 and line 49 was  written as ( @END M;JEQ). I was using M instead of 
    D as destination to Jump if value in the register is equal to 0. 
    ToDo: I will still investigate to know why it jumps to D and not to the meory location specified. 

16/05/2022

-   Working on the fill.asm task. To better understand the memory mapping, I had to draw the diagram to full understand the mapping. See link: https://imgur.com/a/iAzO4Zq
    I broke down the task into two. 
    1.  Write the code to fill up the screen with the black colour without any Keyboard input. I did this to make sure my understanding of the memory mapping
        was correct. 
    2.  Write code to probe keyboard RAM section for any input from the keyboard 

    The first task has been completed. I will proceed to the second task

    ToDo: Take pictures of sketches of previous projects and attach

    NOTE: While probing the RAM[24576] for Keyboard input, I noticed that the CPUEmulhator was a little buggy when you select the fast animation.
    I was unable to see the keyboard pressed key appear on the screen or RAM[24576]
    I had to kill the CPUEmulator and start it again. Seems to be working properly when animation speed is mid-way. 

17/05/2022
-   Second task is complete. I spent a lot of hours trying to optimize my code by using a variable to store the pixel colour value and changing it
    depending on the keyboard press. I realized this was extremely difficult to achieve after spending a lot of hours on this. I decided to solve this problem
    by creating two loops (one for black pixel and the other for white pixel) and then based on current value in RAM[24576] we will go to the particular row
    This was supposed to be easy but it did not work and the reason was that I failed to initialize the row counter to zero in the Keyboard probing loop. 
    Once I added those two lines of code ( @i , M=0) , everything worked. 


22/05/2022
-   CPU completed. The CPU was really mind boggling. It took almost a week of multiple trials to getting the pattern. I made notes and attached the images
    here. Please refer to the URL to have a better understanding of the mistakes I made and how I solved the entire CPU. 
    -   https://imgur.com/a/OD8JgY5 - Page 1 to 5
    -   https://imgur.com/J1S3wHC - Page 3
    -   https://imgur.com/QCHnW0I - Page 4
    -   https://imgur.com/bTGvaaI - Page 5

26/05/2022

-   Memory completed. The memory was quite tricky especially when it had to know how to address the RAM16k, SCREEN and Keyboard. I broke down everystep in my notes
    Please refer to the URL
    -   https://imgur.com/a/SsdX2Bs 


28/05/2022

-   Computer completed. The computer is very easy. Just a direct connection of the previously built chips. 

02/06/2022

-   Chpater 6: Assember. Chapter 6 is purely software and requires refreshing knowledge of c-programming language whihc is the language I will use in implementing the assembler

21/06/2022

-   Chpater 6:  Completed the Assember program and fully tested all the correctness of the result using the binary comparison feature in the assembler. 
-               ToDo: I need to do a step by step pseudo code based algorithm that can easily be translated into code in any language to enable future implmentations. 