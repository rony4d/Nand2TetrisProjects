// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:

    //  Load selection Logic
    DMux8Way(in=load, sel=address[0..2], a=Load0, b=Load1, c=Load2, d=Load3, e=Load4, f=Load5, g=Load6, h=Load7);
    
    //  Input Logic
    RAM64(in=in, load=Load0, address=address[3..8], out=RAMOut0);     //  RAM 0
    RAM64(in=in, load=Load1, address=address[3..8], out=RAMOut1);     //  RAM 1
    RAM64(in=in, load=Load2, address=address[3..8], out=RAMOut2);     //  RAM 2
    RAM64(in=in, load=Load3, address=address[3..8], out=RAMOut3);     //  RAM 3
    RAM64(in=in, load=Load4, address=address[3..8], out=RAMOut4);     //  RAM 4
    RAM64(in=in, load=Load5, address=address[3..8], out=RAMOut5);     //  RAM 5
    RAM64(in=in, load=Load6, address=address[3..8], out=RAMOut6);     //  RAM 6
    RAM64(in=in, load=Load7, address=address[3..8], out=RAMOut7);     //  RAM 7


    //  Output probing logic
    Mux8Way16(a=RAMOut0, b=RAMOut1, c=RAMOut2, d=RAMOut3, e=RAMOut4, f=RAMOut5, g=RAMOut6, h=RAMOut7, sel=address[0..2], out=out);
}