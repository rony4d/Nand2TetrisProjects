class List{

    field int data;
    field List next;

    /* Constructor to create the List */
    constructor List new(int car, List cdr){

        //  the identifiers car and cdr are used in
        //  memory of the Lisp programming language

        let data = car;
        let next = cdr;
        return this;
        
    }

    /** Accessor */

    method int getData()
    {
        return data;
    }

    method List getNext()
    {
        return next;
    }

    /** Prints the list. */

    method void print(){

        var List current;   //  initializes current to the first item 

        let current = this; //  of 'this' list

        while(~(current = null)){
            do Output.printString(current.getData());

            do Output.printChar(32);    //  prints a space

            let current = current.getNext();
        }

        return;
    }

    /** Disposes this list by recursively disposing the tail */

    method void dispose(){

        while(~(next = null)){

            do next.Dispose();
            
        }

        //  use the OS recycle function
        do Memory.deAlloc(this);
        return;
        
    }
}