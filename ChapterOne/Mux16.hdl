// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux16.hdl

/**
 * 16-bit multiplexor: 
 * for i = 0..15 out[i] = a[i] if sel == 0 
 *                        b[i] if sel == 1
 */

CHIP Mux16 {
    IN a[16], b[16], sel;
    OUT out[16];

    PARTS:

    // NOTE: All basic gates(NOT,OR,AND) are the ones in this directory which are NAND gate compositions I implemented not BUILT-IN gates
    
    // Put your code here:

    //MSB - Bit 0
    Not(in=sel, out=notSel0); 
    And(a=notSel0, b=a[0], out=w01);
    And(a=sel, b=b[0], out=w02);
    Or(a=w01, b=w02, out=out[0]);

    //Bit 1
    Not(in=sel, out=notSel1); 
    And(a=notSel1, b=a[1], out=w11);
    And(a=sel, b=b[1], out=w12);
    Or(a=w11, b=w12, out=out[1]);

    //Bit 2
    Not(in=sel, out=notSel2); 
    And(a=notSel2, b=a[2], out=w21);
    And(a=sel, b=b[2], out=w22);
    Or(a=w21, b=w22, out=out[2]);

    //Bit 3
    Not(in=sel, out=notSel3); 
    And(a=notSel3, b=a[3], out=w31);
    And(a=sel, b=b[3], out=w32);
    Or(a=w31, b=w32, out=out[3]);

    //Bit 4
    Not(in=sel, out=notSel4); 
    And(a=notSel4, b=a[4], out=w41);
    And(a=sel, b=b[4], out=w42);
    Or(a=w41, b=w42, out=out[4]);

    //Bit 5
    Not(in=sel, out=notSel5); 
    And(a=notSel5, b=a[5], out=w51);
    And(a=sel, b=b[5], out=w52);
    Or(a=w51, b=w52, out=out[5]);

    //Bit 6
    Not(in=sel, out=notSel6); 
    And(a=notSel6, b=a[6], out=w61);
    And(a=sel, b=b[6], out=w62);
    Or(a=w61, b=w62, out=out[6]);

    //Bit 7
    Not(in=sel, out=notSel7); 
    And(a=notSel7, b=a[7], out=w71);
    And(a=sel, b=b[7], out=w72);
    Or(a=w71, b=w72, out=out[7]);

    //Bit 8
    Not(in=sel, out=notSel8); 
    And(a=notSel8, b=a[8], out=w81);
    And(a=sel, b=b[8], out=w82);
    Or(a=w81, b=w82, out=out[8]);

    //Bit 9
    Not(in=sel, out=notSel9); 
    And(a=notSel9, b=a[9], out=w91);
    And(a=sel, b=b[9], out=w92);
    Or(a=w91, b=w92, out=out[9]);

    //Bit 10
    Not(in=sel, out=notSel10); 
    And(a=notSel10, b=a[10], out=w101);
    And(a=sel, b=b[10], out=w102);
    Or(a=w101, b=w102, out=out[10]);

    //Bit 11
    Not(in=sel, out=notSel11); 
    And(a=notSel11, b=a[11], out=w111);
    And(a=sel, b=b[11], out=w112);
    Or(a=w111, b=w112, out=out[11]);

    //Bit 12
    Not(in=sel, out=notSel12); 
    And(a=notSel12, b=a[12], out=w121);
    And(a=sel, b=b[12], out=w122);
    Or(a=w121, b=w122, out=out[12]);

    //Bit 13
    Not(in=sel, out=notSel13); 
    And(a=notSel13, b=a[13], out=w131);
    And(a=sel, b=b[13], out=w132);
    Or(a=w131, b=w132, out=out[13]);

    //Bit 14
    Not(in=sel, out=notSel14); 
    And(a=notSel14, b=a[14], out=w141);
    And(a=sel, b=b[14], out=w142);
    Or(a=w141, b=w142, out=out[14]);

    //Bit 15
    Not(in=sel, out=notSel15); 
    And(a=notSel15, b=a[15], out=w151);
    And(a=sel, b=b[15], out=w152);
    Or(a=w151, b=w152, out=out[15]);
}
