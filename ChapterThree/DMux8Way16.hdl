// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor 16 bits:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way16 {
    IN in[16], sel[3];
    OUT a[16], b[16], c[16], d[16], e[16], f[16], g[16], h[16];

    PARTS:
    // Put your code here:

    //Bit 0
    DMux4Way(in=in[0], sel=sel[1..2], a=ab0, b=cd0, c=ef0, d=gh0);
    DMux(in=ab0, sel=sel[0], a=a[0], b=b[0]);
    DMux(in=cd0, sel=sel[0], a=c[0], b=d[0]);
    DMux(in=ef0, sel=sel[0], a=e[0], b=f[0]);
    DMux(in=gh0, sel=sel[0], a=g[0], b=h[0]);

    //Bit 1
    DMux4Way(in=in[1], sel=sel[1..2], a=ab1, b=cd1, c=ef1, d=gh1);
    DMux(in=ab1, sel=sel[0], a=a[1], b=b[1]);
    DMux(in=cd1, sel=sel[0], a=c[1], b=d[1]);
    DMux(in=ef1, sel=sel[0], a=e[1], b=f[1]);
    DMux(in=gh1, sel=sel[0], a=g[1], b=h[1]);

    //Bit 2
    DMux4Way(in=in[2], sel=sel[1..2], a=ab2, b=cd2, c=ef2, d=gh2);
    DMux(in=ab2, sel=sel[0], a=a[2], b=b[2]);
    DMux(in=cd2, sel=sel[0], a=c[2], b=d[2]);
    DMux(in=ef2, sel=sel[0], a=e[2], b=f[2]);
    DMux(in=gh2, sel=sel[0], a=g[2], b=h[2]);

    //Bit 3
    DMux4Way(in=in[3], sel=sel[1..2], a=ab3, b=cd3, c=ef3, d=gh3);
    DMux(in=ab3, sel=sel[0], a=a[3], b=b[3]);
    DMux(in=cd3, sel=sel[0], a=c[3], b=d[3]);
    DMux(in=ef3, sel=sel[0], a=e[3], b=f[3]);
    DMux(in=gh3, sel=sel[0], a=g[3], b=h[3]);

    //Bit 4
    DMux4Way(in=in[4], sel=sel[1..2], a=ab4, b=cd4, c=ef4, d=gh4);
    DMux(in=ab4, sel=sel[0], a=a[4], b=b[4]);
    DMux(in=cd4, sel=sel[0], a=c[4], b=d[4]);
    DMux(in=ef4, sel=sel[0], a=e[4], b=f[4]);
    DMux(in=gh4, sel=sel[0], a=g[4], b=h[4]);

    //Bit 5
    DMux4Way(in=in[5], sel=sel[1..2], a=ab5, b=cd5, c=ef5, d=gh5);
    DMux(in=ab5, sel=sel[0], a=a[5], b=b[5]);
    DMux(in=cd5, sel=sel[0], a=c[5], b=d[5]);
    DMux(in=ef5, sel=sel[0], a=e[5], b=f[5]);
    DMux(in=gh5, sel=sel[0], a=g[5], b=h[5]);

    //Bit 6
    DMux4Way(in=in[6], sel=sel[1..2], a=ab6, b=cd6, c=ef6, d=gh6);
    DMux(in=ab6, sel=sel[0], a=a[6], b=b[6]);
    DMux(in=cd6, sel=sel[0], a=c[6], b=d[6]);
    DMux(in=ef6, sel=sel[0], a=e[6], b=f[6]);
    DMux(in=gh6, sel=sel[0], a=g[6], b=h[6]);

    //Bit 7
    DMux4Way(in=in[7], sel=sel[1..2], a=ab7, b=cd7, c=ef7, d=gh7);
    DMux(in=ab7, sel=sel[0], a=a[7], b=b[7]);
    DMux(in=cd7, sel=sel[0], a=c[7], b=d[7]);
    DMux(in=ef7, sel=sel[0], a=e[7], b=f[7]);
    DMux(in=gh7, sel=sel[0], a=g[7], b=h[7]);

    //Bit 8
    DMux4Way(in=in[8], sel=sel[1..2], a=ab8, b=cd8, c=ef8, d=gh8);
    DMux(in=ab8, sel=sel[0], a=a[8], b=b[8]);
    DMux(in=cd8, sel=sel[0], a=c[8], b=d[8]);
    DMux(in=ef8, sel=sel[0], a=e[8], b=f[8]);
    DMux(in=gh8, sel=sel[0], a=g[8], b=h[8]);

    //Bit 9
    DMux4Way(in=in[9], sel=sel[1..2], a=ab9, b=cd9, c=ef9, d=gh9);
    DMux(in=ab9, sel=sel[0], a=a[9], b=b[9]);
    DMux(in=cd9, sel=sel[0], a=c[9], b=d[9]);
    DMux(in=ef9, sel=sel[0], a=e[9], b=f[9]);
    DMux(in=gh9, sel=sel[0], a=g[9], b=h[9]);

    //Bit 10
    DMux4Way(in=in[10], sel=sel[1..2], a=ab10, b=cd10, c=ef10, d=gh10);
    DMux(in=ab10, sel=sel[0], a=a[10], b=b[10]);
    DMux(in=cd10, sel=sel[0], a=c[10], b=d[10]);
    DMux(in=ef10, sel=sel[0], a=e[10], b=f[10]);
    DMux(in=gh10, sel=sel[0], a=g[10], b=h[10]);

    //Bit 11
    DMux4Way(in=in[11], sel=sel[1..2], a=ab11, b=cd11, c=ef11, d=gh11);
    DMux(in=ab11, sel=sel[0], a=a[11], b=b[11]);
    DMux(in=cd11, sel=sel[0], a=c[11], b=d[11]);
    DMux(in=ef11, sel=sel[0], a=e[11], b=f[11]);
    DMux(in=gh11, sel=sel[0], a=g[11], b=h[11]);

    //Bit 12
    DMux4Way(in=in[12], sel=sel[1..2], a=ab12, b=cd12, c=ef12, d=gh12);
    DMux(in=ab12, sel=sel[0], a=a[12], b=b[12]);
    DMux(in=cd12, sel=sel[0], a=c[12], b=d[12]);
    DMux(in=ef12, sel=sel[0], a=e[12], b=f[12]);
    DMux(in=gh12, sel=sel[0], a=g[12], b=h[12]);

    //Bit 13
    DMux4Way(in=in[13], sel=sel[1..2], a=ab13, b=cd13, c=ef13, d=gh13);
    DMux(in=ab13, sel=sel[0], a=a[13], b=b[13]);
    DMux(in=cd13, sel=sel[0], a=c[13], b=d[13]);
    DMux(in=ef13, sel=sel[0], a=e[13], b=f[13]);
    DMux(in=gh13, sel=sel[0], a=g[13], b=h[13]);

    //Bit 14
    DMux4Way(in=in[14], sel=sel[1..2], a=ab14, b=cd14, c=ef14, d=gh14);
    DMux(in=ab14, sel=sel[0], a=a[14], b=b[14]);
    DMux(in=cd14, sel=sel[0], a=c[14], b=d[14]);
    DMux(in=ef14, sel=sel[0], a=e[14], b=f[14]);
    DMux(in=gh14, sel=sel[0], a=g[14], b=h[14]);

    //Bit 15
    DMux4Way(in=in[15], sel=sel[1..2], a=ab15, b=cd15, c=ef15, d=gh15);
    DMux(in=ab15, sel=sel[0], a=a[15], b=b[15]);
    DMux(in=cd15, sel=sel[0], a=c[15], b=d[15]);
    DMux(in=ef15, sel=sel[0], a=e[15], b=f[15]);
    DMux(in=gh15, sel=sel[0], a=g[15], b=h[15]);
}